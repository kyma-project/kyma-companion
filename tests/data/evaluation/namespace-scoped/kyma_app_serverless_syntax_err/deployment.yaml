apiVersion: v1
kind: Namespace
metadata:
  name: kyma_app_serverless_syntax_err
  labels:
    istio-injection: enabled
---
# Redis
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: kyma_app_serverless_syntax_err
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-pv
  namespace: kyma_app_serverless_syntax_err
spec:
  capacity:
    storage: 10Mi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: standard
  hostPath:
    path: /data/redis
---
apiVersion: v1
kind: Secret
metadata:
  name: redis
  namespace: kyma_app_serverless_syntax_err
type: Opaque
data:
  REDIS_PASSWORD: cGFzc3dvcmQ=
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: kyma_app_serverless_syntax_err
spec:
  serviceName: redis
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis
          ports:
            - containerPort: 6379
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: REDIS_PASSWORD
          volumeMounts:
            - name: redis-data
              mountPath: /data
  volumeClaimTemplates:
    - metadata:
        name: redis-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Mi
---
# RestAPI
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: restapi
  namespace: kyma_app_serverless_syntax_err
spec:
  replicas: 1
  selector:
    matchLabels:
      app: restapi
  template:
    metadata:
      labels:
        app: restapi
    spec:
      serviceAccountName: restapi
      containers:
        - name: restapi
          image: jfwilken/restapi:latest
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: REDIS_PASSWORD
            - name: RESTAPI_URL
              valueFrom:
                configMapKeyRef:
                  name: restapi-config
                  key: restapi-url
          ports:
            - containerPort: 80
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /health/live
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 20
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: restapi
  namespace: kyma_app_serverless_syntax_err
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: restapi-access-role
  namespace: kyma_app_serverless_syntax_err
rules:
  - apiGroups: [""]
    resources: ["pods", "services", "endpoints", "events", "configmaps"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: restapi-access-role-binding
  namespace: kyma_app_serverless_syntax_err
subjects:
  - kind: ServiceAccount
    name: restapi
    namespace: kyma_app_serverless_syntax_err
roleRef:
  kind: Role
  name: restapi-access-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: restapi-config
  namespace: kyma_app_serverless_syntax_err
data:
  restapi-url: "http://func1.kyma-app-no-function.svc.cluster.local:80"
---
apiVersion: v1
kind: Service
metadata:
  name: restapi
  namespace: kyma_app_serverless_syntax_err
spec:
  selector:
    app: restapi
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
# Function
# The function can be called through the restapi via the endpoint /api/v1/serverless
---
apiVersion: serverless.kyma-project.io/v1alpha2
kind: Function
metadata:
  name: func1
  namespace: kyma_app_serverless_syntax_err
  labels:
    app: restapi
spec:
  runtime: nodejs20
  source:
    inline:
      dependencies: |-
        {
          "name": "func1",
          "version": "1.0.0",
          "dependencies": {}
        }
      # Note that the funcion has a syntax error:
      # const now = new Dates();
      # The correct syntax is:
      # const now = new Date();
      source: |
        module.exports = {
          main: async function (event, context) {
              // Return a response.
              const now = new Dates();
              const response = {
              statusCode: 200,
              result: {
                message: 'Serverless function is up and running',
                status: 'success',
                utcDatetime: now
              }
            };
            console.log('Response:', response);
            return response;
          }
        }
---
# Subscription
# Sending a post request to the restapi via /api/v1/eventcounter will send a an event that
# the subscription will send further to the restapi via /api/v1/counter (with a post request)
# To see if it works send a get request to /api/v1/counter.
---
apiVersion: eventing.kyma-project.io/v1alpha2
kind: Subscription
metadata:
  labels:
    app.kubernetes.io/name: sub1
  name: sub1
  namespace: kyma_app_serverless_syntax_err
spec:
  config:
    maxInFlightMessages: "10"
  sink: http://restapi.kyma-app-no-function.svc.cluster.local/api/v1/counter
  source: noapp
  typeMatching: standard
  types:
    - increase.counter.v1
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: restapi
  namespace: kyma_app_serverless_syntax_err
spec:
  gateways:
    - kyma-system/kyma-gateway
  hosts:
    - kyma-app-no-function.c-5cb6076.stage.kyma.ondemand.com
  http:
    - route:
        - destination:
            host: restapi
            port:
              number: 80
